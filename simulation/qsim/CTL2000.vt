// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/06/2019 14:29:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CTL2000
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CTL2000_vlg_sample_tst(
	clk,
	pinin,
	rst,
	sampler_tx
);
input  clk;
input [7:0] pinin;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or pinin or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CTL2000_vlg_check_tst (
	pinout,
	teste,
	teste2,
	teste4,
	teste5,
	tester1ld,
	sampler_rx
);
input [7:0] pinout;
input [7:0] teste;
input [15:0] teste2;
input [7:0] teste4;
input [7:0] teste5;
input  tester1ld;
input sampler_rx;

reg [7:0] pinout_expected;
reg [7:0] teste_expected;
reg [15:0] teste2_expected;
reg [7:0] teste4_expected;
reg [7:0] teste5_expected;
reg  tester1ld_expected;

reg [7:0] pinout_prev;
reg [7:0] teste_prev;
reg [15:0] teste2_prev;
reg [7:0] teste4_prev;
reg [7:0] teste5_prev;
reg  tester1ld_prev;

reg [7:0] pinout_expected_prev;
reg [7:0] teste_expected_prev;
reg [15:0] teste2_expected_prev;
reg [7:0] teste4_expected_prev;
reg [7:0] teste5_expected_prev;
reg  tester1ld_expected_prev;

reg [7:0] last_pinout_exp;
reg [7:0] last_teste_exp;
reg [15:0] last_teste2_exp;
reg [7:0] last_teste4_exp;
reg [7:0] last_teste5_exp;
reg  last_tester1ld_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	pinout_prev = pinout;
	teste_prev = teste;
	teste2_prev = teste2;
	teste4_prev = teste4;
	teste5_prev = teste5;
	tester1ld_prev = tester1ld;
end

// update expected /o prevs

always @(trigger)
begin
	pinout_expected_prev = pinout_expected;
	teste_expected_prev = teste_expected;
	teste2_expected_prev = teste2_expected;
	teste4_expected_prev = teste4_expected;
	teste5_expected_prev = teste5_expected;
	tester1ld_expected_prev = tester1ld_expected;
end


// expected pinout[ 7 ]
initial
begin
	pinout_expected[7] = 1'bX;
end 
// expected pinout[ 6 ]
initial
begin
	pinout_expected[6] = 1'bX;
end 
// expected pinout[ 5 ]
initial
begin
	pinout_expected[5] = 1'bX;
end 
// expected pinout[ 4 ]
initial
begin
	pinout_expected[4] = 1'bX;
end 
// expected pinout[ 3 ]
initial
begin
	pinout_expected[3] = 1'bX;
end 
// expected pinout[ 2 ]
initial
begin
	pinout_expected[2] = 1'bX;
end 
// expected pinout[ 1 ]
initial
begin
	pinout_expected[1] = 1'bX;
end 
// expected pinout[ 0 ]
initial
begin
	pinout_expected[0] = 1'bX;
end 
// expected teste[ 7 ]
initial
begin
	teste_expected[7] = 1'bX;
end 
// expected teste[ 6 ]
initial
begin
	teste_expected[6] = 1'bX;
end 
// expected teste[ 5 ]
initial
begin
	teste_expected[5] = 1'bX;
end 
// expected teste[ 4 ]
initial
begin
	teste_expected[4] = 1'bX;
end 
// expected teste[ 3 ]
initial
begin
	teste_expected[3] = 1'bX;
end 
// expected teste[ 2 ]
initial
begin
	teste_expected[2] = 1'bX;
end 
// expected teste[ 1 ]
initial
begin
	teste_expected[1] = 1'bX;
end 
// expected teste[ 0 ]
initial
begin
	teste_expected[0] = 1'bX;
end 
// expected teste2[ 15 ]
initial
begin
	teste2_expected[15] = 1'bX;
end 
// expected teste2[ 14 ]
initial
begin
	teste2_expected[14] = 1'bX;
end 
// expected teste2[ 13 ]
initial
begin
	teste2_expected[13] = 1'bX;
end 
// expected teste2[ 12 ]
initial
begin
	teste2_expected[12] = 1'bX;
end 
// expected teste2[ 11 ]
initial
begin
	teste2_expected[11] = 1'bX;
end 
// expected teste2[ 10 ]
initial
begin
	teste2_expected[10] = 1'bX;
end 
// expected teste2[ 9 ]
initial
begin
	teste2_expected[9] = 1'bX;
end 
// expected teste2[ 8 ]
initial
begin
	teste2_expected[8] = 1'bX;
end 
// expected teste2[ 7 ]
initial
begin
	teste2_expected[7] = 1'bX;
end 
// expected teste2[ 6 ]
initial
begin
	teste2_expected[6] = 1'bX;
end 
// expected teste2[ 5 ]
initial
begin
	teste2_expected[5] = 1'bX;
end 
// expected teste2[ 4 ]
initial
begin
	teste2_expected[4] = 1'bX;
end 
// expected teste2[ 3 ]
initial
begin
	teste2_expected[3] = 1'bX;
end 
// expected teste2[ 2 ]
initial
begin
	teste2_expected[2] = 1'bX;
end 
// expected teste2[ 1 ]
initial
begin
	teste2_expected[1] = 1'bX;
end 
// expected teste2[ 0 ]
initial
begin
	teste2_expected[0] = 1'bX;
end 
// expected teste4[ 7 ]
initial
begin
	teste4_expected[7] = 1'bX;
end 
// expected teste4[ 6 ]
initial
begin
	teste4_expected[6] = 1'bX;
end 
// expected teste4[ 5 ]
initial
begin
	teste4_expected[5] = 1'bX;
end 
// expected teste4[ 4 ]
initial
begin
	teste4_expected[4] = 1'bX;
end 
// expected teste4[ 3 ]
initial
begin
	teste4_expected[3] = 1'bX;
end 
// expected teste4[ 2 ]
initial
begin
	teste4_expected[2] = 1'bX;
end 
// expected teste4[ 1 ]
initial
begin
	teste4_expected[1] = 1'bX;
end 
// expected teste4[ 0 ]
initial
begin
	teste4_expected[0] = 1'bX;
end 
// expected teste5[ 7 ]
initial
begin
	teste5_expected[7] = 1'bX;
end 
// expected teste5[ 6 ]
initial
begin
	teste5_expected[6] = 1'bX;
end 
// expected teste5[ 5 ]
initial
begin
	teste5_expected[5] = 1'bX;
end 
// expected teste5[ 4 ]
initial
begin
	teste5_expected[4] = 1'bX;
end 
// expected teste5[ 3 ]
initial
begin
	teste5_expected[3] = 1'bX;
end 
// expected teste5[ 2 ]
initial
begin
	teste5_expected[2] = 1'bX;
end 
// expected teste5[ 1 ]
initial
begin
	teste5_expected[1] = 1'bX;
end 
// expected teste5[ 0 ]
initial
begin
	teste5_expected[0] = 1'bX;
end 

// expected tester1ld
initial
begin
	tester1ld_expected = 1'bX;
end 
// generate trigger
always @(pinout_expected or pinout or teste_expected or teste or teste2_expected or teste2 or teste4_expected or teste4 or teste5_expected or teste5 or tester1ld_expected or tester1ld)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected pinout = %b | expected teste = %b | expected teste2 = %b | expected teste4 = %b | expected teste5 = %b | expected tester1ld = %b | ",pinout_expected_prev,teste_expected_prev,teste2_expected_prev,teste4_expected_prev,teste5_expected_prev,tester1ld_expected_prev);
	$display("| real pinout = %b | real teste = %b | real teste2 = %b | real teste4 = %b | real teste5 = %b | real tester1ld = %b | ",pinout_prev,teste_prev,teste2_prev,teste4_prev,teste5_prev,tester1ld_prev);
`endif
	if (
		( pinout_expected_prev[0] !== 1'bx ) && ( pinout_prev[0] !== pinout_expected_prev[0] )
		&& ((pinout_expected_prev[0] !== last_pinout_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pinout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pinout_expected_prev);
		$display ("     Real value = %b", pinout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pinout_exp[0] = pinout_expected_prev[0];
	end
	if (
		( pinout_expected_prev[1] !== 1'bx ) && ( pinout_prev[1] !== pinout_expected_prev[1] )
		&& ((pinout_expected_prev[1] !== last_pinout_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pinout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pinout_expected_prev);
		$display ("     Real value = %b", pinout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pinout_exp[1] = pinout_expected_prev[1];
	end
	if (
		( pinout_expected_prev[2] !== 1'bx ) && ( pinout_prev[2] !== pinout_expected_prev[2] )
		&& ((pinout_expected_prev[2] !== last_pinout_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pinout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pinout_expected_prev);
		$display ("     Real value = %b", pinout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pinout_exp[2] = pinout_expected_prev[2];
	end
	if (
		( pinout_expected_prev[3] !== 1'bx ) && ( pinout_prev[3] !== pinout_expected_prev[3] )
		&& ((pinout_expected_prev[3] !== last_pinout_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pinout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pinout_expected_prev);
		$display ("     Real value = %b", pinout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pinout_exp[3] = pinout_expected_prev[3];
	end
	if (
		( pinout_expected_prev[4] !== 1'bx ) && ( pinout_prev[4] !== pinout_expected_prev[4] )
		&& ((pinout_expected_prev[4] !== last_pinout_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pinout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pinout_expected_prev);
		$display ("     Real value = %b", pinout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pinout_exp[4] = pinout_expected_prev[4];
	end
	if (
		( pinout_expected_prev[5] !== 1'bx ) && ( pinout_prev[5] !== pinout_expected_prev[5] )
		&& ((pinout_expected_prev[5] !== last_pinout_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pinout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pinout_expected_prev);
		$display ("     Real value = %b", pinout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pinout_exp[5] = pinout_expected_prev[5];
	end
	if (
		( pinout_expected_prev[6] !== 1'bx ) && ( pinout_prev[6] !== pinout_expected_prev[6] )
		&& ((pinout_expected_prev[6] !== last_pinout_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pinout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pinout_expected_prev);
		$display ("     Real value = %b", pinout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pinout_exp[6] = pinout_expected_prev[6];
	end
	if (
		( pinout_expected_prev[7] !== 1'bx ) && ( pinout_prev[7] !== pinout_expected_prev[7] )
		&& ((pinout_expected_prev[7] !== last_pinout_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pinout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pinout_expected_prev);
		$display ("     Real value = %b", pinout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pinout_exp[7] = pinout_expected_prev[7];
	end
	if (
		( teste_expected_prev[0] !== 1'bx ) && ( teste_prev[0] !== teste_expected_prev[0] )
		&& ((teste_expected_prev[0] !== last_teste_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_teste_exp[0] = teste_expected_prev[0];
	end
	if (
		( teste_expected_prev[1] !== 1'bx ) && ( teste_prev[1] !== teste_expected_prev[1] )
		&& ((teste_expected_prev[1] !== last_teste_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_teste_exp[1] = teste_expected_prev[1];
	end
	if (
		( teste_expected_prev[2] !== 1'bx ) && ( teste_prev[2] !== teste_expected_prev[2] )
		&& ((teste_expected_prev[2] !== last_teste_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_teste_exp[2] = teste_expected_prev[2];
	end
	if (
		( teste_expected_prev[3] !== 1'bx ) && ( teste_prev[3] !== teste_expected_prev[3] )
		&& ((teste_expected_prev[3] !== last_teste_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_teste_exp[3] = teste_expected_prev[3];
	end
	if (
		( teste_expected_prev[4] !== 1'bx ) && ( teste_prev[4] !== teste_expected_prev[4] )
		&& ((teste_expected_prev[4] !== last_teste_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_teste_exp[4] = teste_expected_prev[4];
	end
	if (
		( teste_expected_prev[5] !== 1'bx ) && ( teste_prev[5] !== teste_expected_prev[5] )
		&& ((teste_expected_prev[5] !== last_teste_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_teste_exp[5] = teste_expected_prev[5];
	end
	if (
		( teste_expected_prev[6] !== 1'bx ) && ( teste_prev[6] !== teste_expected_prev[6] )
		&& ((teste_expected_prev[6] !== last_teste_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_teste_exp[6] = teste_expected_prev[6];
	end
	if (
		( teste_expected_prev[7] !== 1'bx ) && ( teste_prev[7] !== teste_expected_prev[7] )
		&& ((teste_expected_prev[7] !== last_teste_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_teste_exp[7] = teste_expected_prev[7];
	end
	if (
		( teste2_expected_prev[0] !== 1'bx ) && ( teste2_prev[0] !== teste2_expected_prev[0] )
		&& ((teste2_expected_prev[0] !== last_teste2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste2_expected_prev);
		$display ("     Real value = %b", teste2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste2_exp[0] = teste2_expected_prev[0];
	end
	if (
		( teste2_expected_prev[1] !== 1'bx ) && ( teste2_prev[1] !== teste2_expected_prev[1] )
		&& ((teste2_expected_prev[1] !== last_teste2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste2_expected_prev);
		$display ("     Real value = %b", teste2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste2_exp[1] = teste2_expected_prev[1];
	end
	if (
		( teste2_expected_prev[2] !== 1'bx ) && ( teste2_prev[2] !== teste2_expected_prev[2] )
		&& ((teste2_expected_prev[2] !== last_teste2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste2_expected_prev);
		$display ("     Real value = %b", teste2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste2_exp[2] = teste2_expected_prev[2];
	end
	if (
		( teste2_expected_prev[3] !== 1'bx ) && ( teste2_prev[3] !== teste2_expected_prev[3] )
		&& ((teste2_expected_prev[3] !== last_teste2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste2_expected_prev);
		$display ("     Real value = %b", teste2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste2_exp[3] = teste2_expected_prev[3];
	end
	if (
		( teste2_expected_prev[4] !== 1'bx ) && ( teste2_prev[4] !== teste2_expected_prev[4] )
		&& ((teste2_expected_prev[4] !== last_teste2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste2_expected_prev);
		$display ("     Real value = %b", teste2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste2_exp[4] = teste2_expected_prev[4];
	end
	if (
		( teste2_expected_prev[5] !== 1'bx ) && ( teste2_prev[5] !== teste2_expected_prev[5] )
		&& ((teste2_expected_prev[5] !== last_teste2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste2_expected_prev);
		$display ("     Real value = %b", teste2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste2_exp[5] = teste2_expected_prev[5];
	end
	if (
		( teste2_expected_prev[6] !== 1'bx ) && ( teste2_prev[6] !== teste2_expected_prev[6] )
		&& ((teste2_expected_prev[6] !== last_teste2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste2_expected_prev);
		$display ("     Real value = %b", teste2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste2_exp[6] = teste2_expected_prev[6];
	end
	if (
		( teste2_expected_prev[7] !== 1'bx ) && ( teste2_prev[7] !== teste2_expected_prev[7] )
		&& ((teste2_expected_prev[7] !== last_teste2_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste2_expected_prev);
		$display ("     Real value = %b", teste2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste2_exp[7] = teste2_expected_prev[7];
	end
	if (
		( teste2_expected_prev[8] !== 1'bx ) && ( teste2_prev[8] !== teste2_expected_prev[8] )
		&& ((teste2_expected_prev[8] !== last_teste2_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste2_expected_prev);
		$display ("     Real value = %b", teste2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste2_exp[8] = teste2_expected_prev[8];
	end
	if (
		( teste2_expected_prev[9] !== 1'bx ) && ( teste2_prev[9] !== teste2_expected_prev[9] )
		&& ((teste2_expected_prev[9] !== last_teste2_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste2_expected_prev);
		$display ("     Real value = %b", teste2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste2_exp[9] = teste2_expected_prev[9];
	end
	if (
		( teste2_expected_prev[10] !== 1'bx ) && ( teste2_prev[10] !== teste2_expected_prev[10] )
		&& ((teste2_expected_prev[10] !== last_teste2_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste2_expected_prev);
		$display ("     Real value = %b", teste2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste2_exp[10] = teste2_expected_prev[10];
	end
	if (
		( teste2_expected_prev[11] !== 1'bx ) && ( teste2_prev[11] !== teste2_expected_prev[11] )
		&& ((teste2_expected_prev[11] !== last_teste2_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste2_expected_prev);
		$display ("     Real value = %b", teste2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste2_exp[11] = teste2_expected_prev[11];
	end
	if (
		( teste2_expected_prev[12] !== 1'bx ) && ( teste2_prev[12] !== teste2_expected_prev[12] )
		&& ((teste2_expected_prev[12] !== last_teste2_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste2_expected_prev);
		$display ("     Real value = %b", teste2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste2_exp[12] = teste2_expected_prev[12];
	end
	if (
		( teste2_expected_prev[13] !== 1'bx ) && ( teste2_prev[13] !== teste2_expected_prev[13] )
		&& ((teste2_expected_prev[13] !== last_teste2_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste2_expected_prev);
		$display ("     Real value = %b", teste2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste2_exp[13] = teste2_expected_prev[13];
	end
	if (
		( teste2_expected_prev[14] !== 1'bx ) && ( teste2_prev[14] !== teste2_expected_prev[14] )
		&& ((teste2_expected_prev[14] !== last_teste2_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste2_expected_prev);
		$display ("     Real value = %b", teste2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste2_exp[14] = teste2_expected_prev[14];
	end
	if (
		( teste2_expected_prev[15] !== 1'bx ) && ( teste2_prev[15] !== teste2_expected_prev[15] )
		&& ((teste2_expected_prev[15] !== last_teste2_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste2_expected_prev);
		$display ("     Real value = %b", teste2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste2_exp[15] = teste2_expected_prev[15];
	end
	if (
		( teste4_expected_prev[0] !== 1'bx ) && ( teste4_prev[0] !== teste4_expected_prev[0] )
		&& ((teste4_expected_prev[0] !== last_teste4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste4_expected_prev);
		$display ("     Real value = %b", teste4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_teste4_exp[0] = teste4_expected_prev[0];
	end
	if (
		( teste4_expected_prev[1] !== 1'bx ) && ( teste4_prev[1] !== teste4_expected_prev[1] )
		&& ((teste4_expected_prev[1] !== last_teste4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste4_expected_prev);
		$display ("     Real value = %b", teste4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_teste4_exp[1] = teste4_expected_prev[1];
	end
	if (
		( teste4_expected_prev[2] !== 1'bx ) && ( teste4_prev[2] !== teste4_expected_prev[2] )
		&& ((teste4_expected_prev[2] !== last_teste4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste4_expected_prev);
		$display ("     Real value = %b", teste4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_teste4_exp[2] = teste4_expected_prev[2];
	end
	if (
		( teste4_expected_prev[3] !== 1'bx ) && ( teste4_prev[3] !== teste4_expected_prev[3] )
		&& ((teste4_expected_prev[3] !== last_teste4_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste4_expected_prev);
		$display ("     Real value = %b", teste4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_teste4_exp[3] = teste4_expected_prev[3];
	end
	if (
		( teste4_expected_prev[4] !== 1'bx ) && ( teste4_prev[4] !== teste4_expected_prev[4] )
		&& ((teste4_expected_prev[4] !== last_teste4_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste4_expected_prev);
		$display ("     Real value = %b", teste4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_teste4_exp[4] = teste4_expected_prev[4];
	end
	if (
		( teste4_expected_prev[5] !== 1'bx ) && ( teste4_prev[5] !== teste4_expected_prev[5] )
		&& ((teste4_expected_prev[5] !== last_teste4_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste4_expected_prev);
		$display ("     Real value = %b", teste4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_teste4_exp[5] = teste4_expected_prev[5];
	end
	if (
		( teste4_expected_prev[6] !== 1'bx ) && ( teste4_prev[6] !== teste4_expected_prev[6] )
		&& ((teste4_expected_prev[6] !== last_teste4_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste4_expected_prev);
		$display ("     Real value = %b", teste4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_teste4_exp[6] = teste4_expected_prev[6];
	end
	if (
		( teste4_expected_prev[7] !== 1'bx ) && ( teste4_prev[7] !== teste4_expected_prev[7] )
		&& ((teste4_expected_prev[7] !== last_teste4_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste4_expected_prev);
		$display ("     Real value = %b", teste4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_teste4_exp[7] = teste4_expected_prev[7];
	end
	if (
		( teste5_expected_prev[0] !== 1'bx ) && ( teste5_prev[0] !== teste5_expected_prev[0] )
		&& ((teste5_expected_prev[0] !== last_teste5_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste5_expected_prev);
		$display ("     Real value = %b", teste5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_teste5_exp[0] = teste5_expected_prev[0];
	end
	if (
		( teste5_expected_prev[1] !== 1'bx ) && ( teste5_prev[1] !== teste5_expected_prev[1] )
		&& ((teste5_expected_prev[1] !== last_teste5_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste5_expected_prev);
		$display ("     Real value = %b", teste5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_teste5_exp[1] = teste5_expected_prev[1];
	end
	if (
		( teste5_expected_prev[2] !== 1'bx ) && ( teste5_prev[2] !== teste5_expected_prev[2] )
		&& ((teste5_expected_prev[2] !== last_teste5_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste5_expected_prev);
		$display ("     Real value = %b", teste5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_teste5_exp[2] = teste5_expected_prev[2];
	end
	if (
		( teste5_expected_prev[3] !== 1'bx ) && ( teste5_prev[3] !== teste5_expected_prev[3] )
		&& ((teste5_expected_prev[3] !== last_teste5_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste5_expected_prev);
		$display ("     Real value = %b", teste5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_teste5_exp[3] = teste5_expected_prev[3];
	end
	if (
		( teste5_expected_prev[4] !== 1'bx ) && ( teste5_prev[4] !== teste5_expected_prev[4] )
		&& ((teste5_expected_prev[4] !== last_teste5_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste5_expected_prev);
		$display ("     Real value = %b", teste5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_teste5_exp[4] = teste5_expected_prev[4];
	end
	if (
		( teste5_expected_prev[5] !== 1'bx ) && ( teste5_prev[5] !== teste5_expected_prev[5] )
		&& ((teste5_expected_prev[5] !== last_teste5_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste5_expected_prev);
		$display ("     Real value = %b", teste5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_teste5_exp[5] = teste5_expected_prev[5];
	end
	if (
		( teste5_expected_prev[6] !== 1'bx ) && ( teste5_prev[6] !== teste5_expected_prev[6] )
		&& ((teste5_expected_prev[6] !== last_teste5_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste5_expected_prev);
		$display ("     Real value = %b", teste5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_teste5_exp[6] = teste5_expected_prev[6];
	end
	if (
		( teste5_expected_prev[7] !== 1'bx ) && ( teste5_prev[7] !== teste5_expected_prev[7] )
		&& ((teste5_expected_prev[7] !== last_teste5_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste5[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste5_expected_prev);
		$display ("     Real value = %b", teste5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_teste5_exp[7] = teste5_expected_prev[7];
	end
	if (
		( tester1ld_expected_prev !== 1'bx ) && ( tester1ld_prev !== tester1ld_expected_prev )
		&& ((tester1ld_expected_prev !== last_tester1ld_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tester1ld :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tester1ld_expected_prev);
		$display ("     Real value = %b", tester1ld_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_tester1ld_exp = tester1ld_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CTL2000_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] pinin;
reg rst;
// wires                                               
wire [7:0] pinout;
wire [7:0] teste;
wire [15:0] teste2;
wire [7:0] teste4;
wire [7:0] teste5;
wire tester1ld;

wire sampler;                             

// assign statements (if any)                          
CTL2000 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.pinin(pinin),
	.pinout(pinout),
	.rst(rst),
	.teste(teste),
	.teste2(teste2),
	.teste4(teste4),
	.teste5(teste5),
	.tester1ld(tester1ld)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// pinin[ 7 ]
initial
begin
	pinin[7] = 1'b0;
end 
// pinin[ 6 ]
initial
begin
	pinin[6] = 1'b0;
end 
// pinin[ 5 ]
initial
begin
	pinin[5] = 1'b0;
end 
// pinin[ 4 ]
initial
begin
	pinin[4] = 1'b0;
	pinin[4] = #640000 1'b1;
	pinin[4] = #270000 1'b0;
end 
// pinin[ 3 ]
initial
begin
	pinin[3] = 1'b0;
	pinin[3] = #640000 1'b1;
	pinin[3] = #270000 1'b0;
end 
// pinin[ 2 ]
initial
begin
	pinin[2] = 1'b0;
end 
// pinin[ 1 ]
initial
begin
	pinin[1] = 1'b0;
end 
// pinin[ 0 ]
initial
begin
	pinin[0] = 1'b0;
	pinin[0] = #640000 1'b1;
	pinin[0] = #270000 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
end 

CTL2000_vlg_sample_tst tb_sample (
	.clk(clk),
	.pinin(pinin),
	.rst(rst),
	.sampler_tx(sampler)
);

CTL2000_vlg_check_tst tb_out(
	.pinout(pinout),
	.teste(teste),
	.teste2(teste2),
	.teste4(teste4),
	.teste5(teste5),
	.tester1ld(tester1ld),
	.sampler_rx(sampler)
);
endmodule

