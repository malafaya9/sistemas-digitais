// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/06/2019 01:27:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    COMP
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module COMP_vlg_sample_tst(
	a,
	b,
	sampler_tx
);
input [7:0] a;
input [7:0] b;
output sampler_tx;

reg sample;
time current_time;
always @(a or b)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module COMP_vlg_check_tst (
	aeqb,
	agtb,
	altb,
	sampler_rx
);
input  aeqb;
input  agtb;
input  altb;
input sampler_rx;

reg  aeqb_expected;
reg  agtb_expected;
reg  altb_expected;

reg  aeqb_prev;
reg  agtb_prev;
reg  altb_prev;

reg  aeqb_expected_prev;
reg  agtb_expected_prev;
reg  altb_expected_prev;

reg  last_aeqb_exp;
reg  last_agtb_exp;
reg  last_altb_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	aeqb_prev = aeqb;
	agtb_prev = agtb;
	altb_prev = altb;
end

// update expected /o prevs

always @(trigger)
begin
	aeqb_expected_prev = aeqb_expected;
	agtb_expected_prev = agtb_expected;
	altb_expected_prev = altb_expected;
end



// expected aeqb
initial
begin
	aeqb_expected = 1'bX;
end 

// expected agtb
initial
begin
	agtb_expected = 1'bX;
end 

// expected altb
initial
begin
	altb_expected = 1'bX;
end 
// generate trigger
always @(aeqb_expected or aeqb or agtb_expected or agtb or altb_expected or altb)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected aeqb = %b | expected agtb = %b | expected altb = %b | ",aeqb_expected_prev,agtb_expected_prev,altb_expected_prev);
	$display("| real aeqb = %b | real agtb = %b | real altb = %b | ",aeqb_prev,agtb_prev,altb_prev);
`endif
	if (
		( aeqb_expected_prev !== 1'bx ) && ( aeqb_prev !== aeqb_expected_prev )
		&& ((aeqb_expected_prev !== last_aeqb_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aeqb :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aeqb_expected_prev);
		$display ("     Real value = %b", aeqb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aeqb_exp = aeqb_expected_prev;
	end
	if (
		( agtb_expected_prev !== 1'bx ) && ( agtb_prev !== agtb_expected_prev )
		&& ((agtb_expected_prev !== last_agtb_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port agtb :: @time = %t",  $realtime);
		$display ("     Expected value = %b", agtb_expected_prev);
		$display ("     Real value = %b", agtb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_agtb_exp = agtb_expected_prev;
	end
	if (
		( altb_expected_prev !== 1'bx ) && ( altb_prev !== altb_expected_prev )
		&& ((altb_expected_prev !== last_altb_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port altb :: @time = %t",  $realtime);
		$display ("     Expected value = %b", altb_expected_prev);
		$display ("     Real value = %b", altb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_altb_exp = altb_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module COMP_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] a;
reg [7:0] b;
// wires                                               
wire aeqb;
wire agtb;
wire altb;

wire sampler;                             

// assign statements (if any)                          
COMP i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.aeqb(aeqb),
	.agtb(agtb),
	.altb(altb),
	.b(b)
);
// a[ 7 ]
initial
begin
	a[7] = 1'b0;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b0;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b0;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
	a[3] = #90000 1'b1;
	a[3] = #30000 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b0;
	a[2] = #90000 1'b1;
	a[2] = #30000 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
	a[1] = #90000 1'b1;
	a[1] = #30000 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
	a[0] = #90000 1'b1;
	a[0] = #30000 1'b0;
end 
// b[ 7 ]
initial
begin
	b[7] = 1'b0;
end 
// b[ 6 ]
initial
begin
	b[6] = 1'b0;
end 
// b[ 5 ]
initial
begin
	b[5] = 1'b0;
end 
// b[ 4 ]
initial
begin
	b[4] = 1'b0;
	b[4] = #110000 1'b1;
	b[4] = #100000 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
	b[2] = #110000 1'b1;
	b[2] = #100000 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b0;
end 

COMP_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.sampler_tx(sampler)
);

COMP_vlg_check_tst tb_out(
	.aeqb(aeqb),
	.agtb(agtb),
	.altb(altb),
	.sampler_rx(sampler)
);
endmodule

